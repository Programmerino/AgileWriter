# ------------------------------------------------------------------------------
# More resources related to this file:
# [1] Overview   | https://docs.docker.com/compose/
# [2] PostgreSQL | https://github.com/docker-library/docs/tree/master/postgres
# [3] Node.js    | https://github.com/nodejs/docker-node/blob/master/README.md#how-to-use-this-image
# -------------
#  More resources for your projects:
# [4] Samples    | https://github.com/docker/awesome-compose
# [5]  Vars   | https://docs.docker.com/compose/ironment-variables/
# [6] Secrets    | https://docs.docker.com/engine/swarm/secrets/#use-secrets-in-compose
# ------------------------------------------------------------------------------

# This section defines all of our components, each which is itself a docker image [1].
services:
  # This section defines our PostgreSQL database [2].
  # Note that the name `db` also becomes the hostname of the postgres container.
  # For more details see `server.js`.
  heroku-cli:
    build: ./heroku
    env_file: ./heroku/.env

  db:
    build: ./db
    env_file: .env
    volumes:
      - amazone-db:/var/lib/postgresql/data # Creates a docker managed volume to persist your data.
      - ./db/init_data:/docker-entrypoint-initdb.d # Binds ./init_data to docker-entrypoint-initdb.d.
    #   The postgres image will run any files in this directory on startup,
    #   in our case the file `init_data/create.sql`

  # ------------------------------------------- # This section defines our Node.js image [3].
  web:
    build:
      context: ./
      dockerfile: Dockerfile
      target: devapp
    # user: "node" # Use a non-root user node
    # working_dir: /home/node/app # with home directory /home/node/app
    # environment:
    #  - NODE_ENV=production # << Use this when deploying your application,
    #                                           #   currently we have it off so that changes to
    #                                           #   *.ejs are visible without restarting docker-compose.
    depends_on:
      - db # This indicates that docker should start the database first,
    # otherwise our website would have no data.
    ports:
      - "3000:3000" # Here we do need to publish the port for viewing on the host.
    volumes:
      - ./:/app/src # Binds the current directory (containing our source code) into the image,
        #  so that changes made to the source code on the host
        #  are reflected witin the container.
    # command:
    #   "npm start" # This is a semi-hack for this lab that runs both npm install
      # and node index.js (see the prestart command in package.json)
# This defines our volume(s), which will perist throughout startups.
# If you want to get rid of a hanging volume, e.g. to test your database init,
# run `docker-compose rm -v`. Note that this will remove ALL of your data, so
# be extra sure you've made a stable backup somewhere.
volumes:
  amazone-db: {}
